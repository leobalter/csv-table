#!/usr/bin/env node
var csvTable = require('commander');
var csvParser = require('../');

csvTable
  .usage("[options] <file ...>")
  .option("-d, --delimiter <value>", "Sets the delimiter, defaults to ';'")
  .option("-c, --columns", "Use CSV columns headers")
  .option("-t, --trim", "trim values")
  .option("-l, --ltrim", "left trim values")
  .option("-r, --rtrim", "right trim values")
  .option("-s, --skip", "skip empty lines")
  .option("-q, --quote <value>", "Quote character, defaults to '\"'")
  .option("-m, --comment <value>", "Comment character, default is none")
  .option("-e, --escape <value>", "Escape character, default is '\"'")
  .option("-r, --rowDelimiter <value>", "Row delimiter character, default is '\\n'")
  .parse(process.argv);

function helpHandler() {
  console.log('This app prints a table out of the pointed CSV file.');
}
csvTable.on('help', helpHandler);

// not enough arguments to act
if (!csvTable.args.length) {
  csvTable.help();
}

function forEachHandler(csvFile) {
  var options = {
    delimiter: csvTable.delimiter,
    columns: !!csvTable.columns,
    trim: !!csvTable.trim,
    ltrim: !!csvTable.ltrim,
    rtrim: !!csvTable.rtrim,
    skip_empty_lines: !!csvTable.skip
  };

  options.quote = (options.quote ? csvTable.quote : null);
  options.comment = (options.comment ? csvTable.comment : null);
  options.escape = (options.comment ? csvTable.escape : null);
  options.rowDelimiter = (options.rowDelimiter ? csvTable.rowDelimiter : null);

  function csvParserHandler(err, result) {
    if (!err) {
      result.show();
    }
  }
  csvParser(csvFile, options, csvParserHandler);
}
csvTable.args.forEach(forEachHandler);
